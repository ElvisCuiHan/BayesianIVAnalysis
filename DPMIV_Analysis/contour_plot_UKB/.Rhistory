result = result %>% add_row(ca)
}
colnames(result) = c("mu1	sig1	mu2	sig2	rho	n")
View(result)
write_delim(result, "../../../Codes/DPMIV_analysis/contour_plot_UKB/female_last_result.txt")
as.numeric(result)
hi = strsplit(result, " ")
hi = strsplit(result, sep=" ")
hi = str_split(result, sep=" ")
hi = str_split(as.matrix(result), sep=" ")
hi = str_split(result, sep=" ")
hi = str_split(result, pattern=" ")
View(hi)
hi = str_split(ca, pattern=" ")
hi = str_split(ca, pattern=" ")[1]
hi
hi = as_tibble(str_split(ca, pattern=" "))
hi = as.matrix(str_split(ca, pattern=" "))
View(hi)
hi = as.numeric(str_split(ca, pattern=" "))
hi = as_tibble(str_split(ca, pattern=" "))
hi = as_tibble(str_split(ca, pattern=" "), .name_repair = c("1","2", "3","4","5"))
hi = as_tibble(str_split(ca, pattern=" "), .name_repair = c("a","b", "c","d","e"))
?vctrs::vec_as_names
hi = as_tibble(str_split(ca, pattern=" "), .name_repair = rep(NA, 5))
hi = as_tibble(str_split(ca, pattern=" "), .name_repair = "unique")
View(hi)
hi = t(as_tibble(str_split(ca, pattern=" "), .name_repair = "universal"))
hi = t(as_tibble(str_split(ca, pattern=" "), .name_repair = "unique"))
View(hi)
hi = as.matrix(t(as_tibble(str_split(ca, pattern=" "), .name_repair = "unique")))
View(hi)
hi = as.numeric(t(as_tibble(str_split(ca, pattern=" "), .name_repair = "unique")))
hi
hi = as.numeric(as.matrix(t(as_tibble(str_split(ca, pattern=" "), .name_repair = "unique"))))
noquote
noquote(ca)
ca
files = list.files("./")
files = files[str_detect(files, "last")]
#files = files[str_detect(files, "trace_a2")]
fnum <- length(files)
ca = read.table(files[1], sep=",", header = T)
ca = noquote(ca[6:(length(ca[,1])-1), ])
result <- tibble(ca)
for (i in 2:fnum){
ca = read.table(files[i], sep=",", header = T)
ca = noquote(ca[6:(length(ca[,1])-1), ])
print(i)
result = result %>% add_row(ca)
}
colnames(result) = c("mu1	sig1	mu2	sig2	rho	n")
write_delim(result, "../../../Codes/DPMIV_analysis/contour_plot_UKB/female_last_result.txt")
ca
strsplit(ca)
strsplit(ca, " ")
str_split(ca, " ")
files = list.files("./")
files = files[str_detect(files, "last")]
#files = files[str_detect(files, "trace_a2")]
fnum <- length(files)
ca = read.table(files[1], sep=",", header = T)
ca = matrix(as.numeric(unlist(strsplit(ca[6:(length(ca[,1])-1), ], " "))),
ncol=5, byrow=TRUE)
result <- tibble(ca)
ca
ca = read.table(files[1], sep=",", header = T)
ca = matrix(as.numeric(unlist(strsplit(ca[6:(length(ca[,1])-1), ], " "))),
ncol=6, byrow=TRUE)
ca
result <- tibble(ca)
View(result)
result <- tibble(mu1 = ca[,1], sig1 = ca[,2], mu2 = ca[,3], sig2 = ca[,4], rho=ca[,5], n=ca[,6])
View(result)
ca = read.table(files[i], sep=",", header = T)
ca = matrix(as.numeric(unlist(strsplit(ca[6:(length(ca[,1])-1), ], " "))),
ncol=6, byrow=TRUE)
print(i)
result = result %>% add_row(ca)
colnames(ca =  c("mu1",	"sig1",	"mu2",	"sig2",	"rho",	"n"))
colnames(ca) =  c("mu1",	"sig1",	"mu2",	"sig2",	"rho",	"n")
result <- tibble(ca)
View(result)
ca = read.table(files[1], sep=",", header = T)
ca = matrix(as.numeric(unlist(strsplit(ca[6:(length(ca[,1])-1), ], " "))),
ncol=6, byrow=TRUE)
colnames(ca) =  c("mu1",	"sig1",	"mu2",	"sig2",	"rho",	"n")
result <- tibble(ca)
ca = read.table(files[1], sep=",", header = T)
ca = matrix(as.numeric(unlist(strsplit(ca[6:(length(ca[,1])-1), ], " "))),
ncol=6, byrow=TRUE)
result <- tibble(mu1 = ca[,1], sig1 = ca[,2], mu2 = ca[,3], sig2 = ca[,4], rho=ca[,5], n=ca[,6])
for (i in 2:fnum){
ca = read.table(files[i], sep=",", header = T)
ca = matrix(as.numeric(unlist(strsplit(ca[6:(length(ca[,1])-1), ], " "))),
ncol=6, byrow=TRUE)
colnames(ca) =  c("mu1",	"sig1",	"mu2",	"sig2",	"rho",	"n")
print(i)
result = result %>% add_row(ca)
}
ca = read.table(files[i], sep=",", header = T)
ca = matrix(as.numeric(unlist(strsplit(ca[6:(length(ca[,1])-1), ], " "))),
ncol=6, byrow=TRUE)
colnames(ca) =  c("mu1",	"sig1",	"mu2",	"sig2",	"rho",	"n")
View(ca)
ca = as.data.frame(ca)
print(i)
result = result %>% add_row(ca)
ca = read.table(files[1], sep=",", header = T)
ca = matrix(as.numeric(unlist(strsplit(ca[6:(length(ca[,1])-1), ], " "))),
ncol=6, byrow=TRUE)
result <- tibble(mu1 = ca[,1], sig1 = ca[,2], mu2 = ca[,3], sig2 = ca[,4], rho=ca[,5], n=ca[,6])
for (i in 2:fnum){
ca = read.table(files[i], sep=",", header = T)
ca = matrix(as.numeric(unlist(strsplit(ca[6:(length(ca[,1])-1), ], " "))),
ncol=6, byrow=TRUE)
colnames(ca) =  c("mu1",	"sig1",	"mu2",	"sig2",	"rho",	"n")
ca = as.data.frame(ca)
print(i)
result = result %>% add_row(ca)
}
write_delim(result, "../../../Codes/DPMIV_analysis/contour_plot_UKB/female_last_result.txt")
setwd("~/Downloads/Dr Li GSR/Codes/DPMIV_Analysis/contour_plot_UKB")
rm(list = ls())
setwd("~/Downloads/Dr Li GSR/Codes/DPMIV_Analysis/contour_plot_UKB")
library(MASS)
temp = read_table("female_last_result.txt")
View(temp)
attach(temp)
cov1 = sqrt(sig1*sig2)*rho
i=1
Sigma = matrix(c(sig1[i],cov1[i],cov1[i],sig2[i]),2,2)
e_simul = mvrnorm(n=n[i], c(mu1[i],mu2[i]),  Sigma)
for (i in 2:nrow(temp)) {
e_simul = rbind(e_simul, mvrnorm(n=n[i], c(mu1[i],mu2[i]),  Sigma))
}
plot(e_simul, xlab='e1', ylab='e2')
i=1
Sigma = matrix(c(sig1[i],cov1[i],cov1[i],sig2[i]),2,2)
e_simul = mvrnorm(n=n[i]*20, c(mu1[i],mu2[i]),  Sigma)
for (i in 2:nrow(temp)) {
e_simul = rbind(e_simul, mvrnorm(n=n[i]*20, c(mu1[i],mu2[i]),  Sigma))
}
fit = kde2d(e_simul[,1], e_simul[,2], n=100)
filled.contour(fit, color = rainbow)
fit = kde2d(e_simul[,1], e_simul[,2], n=40)
i=1
Sigma = matrix(c(sig1[i],cov1[i],cov1[i],sig2[i]),2,2)
e_simul = mvrnorm(n=n[i], c(mu1[i],mu2[i]),  Sigma)
for (i in 2:nrow(temp)) {
e_simul = rbind(e_simul, mvrnorm(n=n[i], c(mu1[i],mu2[i]),  Sigma))
}
dim(e_simul)
filled.contour(fit, color = rainbow)
fit = kde2d(e_simul[,1], e_simul[,2], n=100)
filled.contour(fit, color = rainbow)
temp = temp[1:5, ]
attach(temp)
cov1 = sqrt(sig1*sig2)*rho
i=1
Sigma = matrix(c(sig1[i],cov1[i],cov1[i],sig2[i]),2,2)
e_simul = mvrnorm(n=n[i], c(mu1[i],mu2[i]),  Sigma)
for (i in 2:nrow(temp)) {
e_simul = rbind(e_simul, mvrnorm(n=n[i], c(mu1[i],mu2[i]),  Sigma))
}
plot(e_simul, xlab='e1', ylab='e2')
i=1
Sigma = matrix(c(sig1[i],cov1[i],cov1[i],sig2[i]),2,2)
e_simul = mvrnorm(n=n[i]*20, c(mu1[i],mu2[i]),  Sigma)
for (i in 2:nrow(temp)) {
e_simul = rbind(e_simul, mvrnorm(n=n[i]*20, c(mu1[i],mu2[i]),  Sigma))
}
fit = kde2d(e_simul[,1], e_simul[,2], n=100)
filled.contour(fit, color = rainbow)
plot(e_simul)
i=1
Sigma = matrix(c(sig1[i],cov1[i],cov1[i],sig2[i]),2,2)
library(MASS)
temp = read_table("female_last_result.txt")
attach(temp)
cov1 = sqrt(sig1*sig2)*rho
i=1
Sigma = matrix(c(sig1[i],cov1[i],cov1[i],sig2[i]),2,2)
e_simul = mvrnorm(n=n[i]*20, c(mu1[i],mu2[i]),  Sigma)
for (i in 2:nrow(temp)) {
e_simul = rbind(e_simul, mvrnorm(n=round(n[i]*0.1) + 100, c(mu1[i],mu2[i]),  Sigma))
}
fit = kde2d(e_simul[,1], e_simul[,2], n=100)
filled.contour(fit, color = rainbow)
View(temp)
filled.contour(fit, color = rainbow,xlim=c(4.6, 5.3),ylim=c(3,9))
hist(temp$mu1)
hist(temp$mu1, breaks=50)
hist(temp$mu2, breaks=50)
hist(temp$sig1, breaks=50)
help(kde2d)
range(e_simul[,1])
i=1
Sigma = matrix(c(sig1[i],cov1[i],cov1[i],sig2[i]),2,2)
e_simul = mvrnorm(n=n[i]*20, c(mu1[i],mu2[i]),  Sigma)
for (i in 2:nrow(temp)) {
e_simul = rbind(e_simul, mvrnorm(n=round(n[i]*0.1) + 100, c(mu1[i],mu2[i]),  Sigma))
}
fit = kde2d(e_simul[,1], e_simul[,2], n=100,
lims = c(quantile(e_simul[,1], probs = c(0.1, 0.9)),
quantile(e_simul[,2], probs = c(0.1, 0.9))))
filled.contour(fit, color = rainbow)
plot(e_simul)
fit = kde2d(e_simul[,1], e_simul[,2], n=500,
lims = c(quantile(e_simul[,1], probs = c(0.1, 0.9)),
quantile(e_simul[,2], probs = c(0.1, 0.9))))
View(temp)
filled.contour(fit, color = rainbow)
i=1
Sigma = matrix(c(sig1[i],cov1[i],cov1[i],sig2[i]),2,2)
e_simul = mvrnorm(n=n[i]*20, c(mu1[i],mu2[i]),  Sigma)
e_simul = mvrnorm(n=round(n[i]*0.1) + 10, c(mu1[i],mu2[i]),  Sigma)
for (i in 2:nrow(temp)) {
e_simul = rbind(e_simul, mvrnorm(n=round(n[i]*0.1) + 10, c(mu1[i],mu2[i]),  Sigma))
}
fit = kde2d(e_simul[,1], e_simul[,2], n=500, )
#lims = c(quantile(e_simul[,1], probs = c(0.1, 0.9)),
#         quantile(e_simul[,2], probs = c(0.1, 0.9))))
filled.contour(fit, color = rainbow)
filled.contour(fit, color = rainbow,xlim=c(4.6, 5.3),ylim=c(3,9))
e_simul = apply(e_simul, 2, scale)
dim(e_simul)
mean(e_simul[,1])
mean(e_simul[,2])
fit = kde2d(e_simul[,1], e_simul[,2], n=500, )
#lims = c(quantile(e_simul[,1], probs = c(0.1, 0.9)),
#         quantile(e_simul[,2], probs = c(0.1, 0.9))))
filled.contour(fit, color = rainbow)
filled.contour(fit, color = rainbow,xlim=c(4.6, 5.3),ylim=c(3,9))
filled.contour(fit, color = rainbow,xlim=c(-3, 3),ylim=c(-3,3))
rm(list = ls())
setwd("~/Downloads/Dr Li GSR/Codes/DPMIV_Analysis/contour_plot_UKB")
library(MASS)
temp = read_table("female_last_result.txt")
attach(temp)
cov1 = sqrt(sig1*sig2)*rho
i=1
Sigma = matrix(c(sig1[i],cov1[i],cov1[i],sig2[i]),2,2)
e_simul = mvrnorm(n=n[i], c(mu1[i],mu2[i]),  Sigma)
for (i in 2:nrow(temp)) {
e_simul = rbind(e_simul, mvrnorm(n=n[i], c(mu1[i],mu2[i]),  Sigma))
}
plot(e_simul, xlab='e1', ylab='e2')
cov1 = sqrt(sig1*sig2)*rho
i=1
Sigma = matrix(c(sig1[i],cov1[i] / 10,cov1[i] / 10,sig2[i]),2,2)
e_simul = mvrnorm(n=n[i], c(mu1[i],mu2[i]),  Sigma)
for (i in 2:nrow(temp)) {
e_simul = rbind(e_simul, mvrnorm(n=n[i], c(mu1[i],mu2[i]),  Sigma))
}
plot(e_simul, xlab='e1', ylab='e2')
attach(temp)
cov1 = sqrt(sig1*sig2)*rho
i=1
Sigma = matrix(c(sig1[i] / 10, cov1[i], cov1[i], sig2[i] / 10),2,2)
e_simul = mvrnorm(n=n[i], c(mu1[i],mu2[i]),  Sigma)
for (i in 2:nrow(temp)) {
e_simul = rbind(e_simul, mvrnorm(n=n[i], c(mu1[i],mu2[i]),  Sigma))
}
plot(e_simul, xlab='e1', ylab='e2')
library(MASS)
temp = read_table("female_last_result.txt")
attach(temp)
cov1 = sqrt(sig1*sig2)*rho
i=1
Sigma = matrix(c(sig1[i] / 10, cov1[i], cov1[i], sig2[i] / 10),2,2)
e_simul = mvrnorm(n=n[i], c(mu1[i],mu2[i]),  Sigma)
for (i in 2:nrow(temp)) {
Sigma = matrix(c(sig1[i] / 10, cov1[i], cov1[i], sig2[i] / 10),2,2)
e_simul = rbind(e_simul, mvrnorm(n=n[i], c(mu1[i],mu2[i]),  Sigma))
}
cov1 = sqrt(sig1*sig2)*rho
i=1
Sigma = matrix(c(sig1[i], cov1[i], cov1[i], sig2[i]),2,2) / 10
e_simul = mvrnorm(n=n[i], c(mu1[i],mu2[i]),  Sigma)
for (i in 2:nrow(temp)) {
Sigma = matrix(c(sig1[i], cov1[i], cov1[i], sig2[i]),2,2) / 10
e_simul = rbind(e_simul, mvrnorm(n=n[i], c(mu1[i],mu2[i]),  Sigma))
}
plot(e_simul, xlab='e1', ylab='e2')
i=1
Sigma = matrix(c(sig1[i],cov1[i],cov1[i],sig2[i]),2,2)
e_simul = mvrnorm(n=round(n[i]), c(mu1[i],mu2[i]),  Sigma)
for (i in 2:nrow(temp)) {
e_simul = rbind(e_simul, mvrnorm(n=round(n[i]), c(mu1[i],mu2[i]),  Sigma))
}
fit = kde2d(e_simul[,1], e_simul[,2], n=100, )
#lims = c(quantile(e_simul[,1], probs = c(0.1, 0.9)),
#         quantile(e_simul[,2], probs = c(0.1, 0.9))))
filled.contour(fit, color = rainbow)
i=1
Sigma = matrix(c(sig1[i],cov1[i],cov1[i],sig2[i]),2,2) / 10
e_simul = mvrnorm(n=round(n[i]), c(mu1[i],mu2[i]),  Sigma)
for (i in 2:nrow(temp)) {
Sigma = matrix(c(sig1[i], cov1[i], cov1[i], sig2[i]),2,2) / 10
e_simul = rbind(e_simul, mvrnorm(n=round(n[i]), c(mu1[i],mu2[i]),  Sigma))
}
fit = kde2d(e_simul[,1], e_simul[,2], n=100, )
#lims = c(quantile(e_simul[,1], probs = c(0.1, 0.9)),
#         quantile(e_simul[,2], probs = c(0.1, 0.9))))
filled.contour(fit, color = rainbow)
filled.contour(fit, color = rainbow,xlim=c(4.8, 5.1),ylim=c(4.2,9))
plot(w_simul)
plot(e_simul)
i=1
Sigma = matrix(c(sig1[i],cov1[i],cov1[i],sig2[i]),2,2) / 10
e_simul = mvrnorm(n=round(n[i]*0.1)+10, c(mu1[i],mu2[i]),  Sigma)
for (i in 2:nrow(temp)) {
Sigma = matrix(c(sig1[i], cov1[i], cov1[i], sig2[i]),2,2) / 10
e_simul = rbind(e_simul, mvrnorm(n=round(n[i]*0.1)+10, c(mu1[i],mu2[i]),  Sigma))
}
plot(e_simul)
fit = kde2d(e_simul[,1], e_simul[,2], n=300, )
#lims = c(quantile(e_simul[,1], probs = c(0.1, 0.9)),
#         quantile(e_simul[,2], probs = c(0.1, 0.9))))
filled.contour(fit, color = rainbow)
filled.contour(fit, color = rainbow,xlim=c(4.8, 5.1),ylim=c(4.2,9))
fit = kde2d(e_simul[,1], e_simul[,2], n=900, )
#lims = c(quantile(e_simul[,1], probs = c(0.1, 0.9)),
#         quantile(e_simul[,2], probs = c(0.1, 0.9))))
filled.contour(fit, color = rainbow)
fit = kde2d(e_simul[,1], e_simul[,2], n=90, )
#lims = c(quantile(e_simul[,1], probs = c(0.1, 0.9)),
#         quantile(e_simul[,2], probs = c(0.1, 0.9))))
filled.contour(fit, color = rainbow)
filled.contour(fit, color = rainbow,xlim=c(4.8, 5.1),ylim=c(4.2,9))
r <- quantile(x, c(0.25, 0.75))
h <- (r[2] - r[1])/1.34
4 * 1.06 * min(sqrt(var(x)), h) * length(x)^(-1/5)
x = e_simul
r <- quantile(x, c(0.25, 0.75))
h <- (r[2] - r[1])/1.34
4 * 1.06 * min(sqrt(var(x)), h) * length(x)^(-1/5)
bdwd = function(x) {
r <- quantile(x, c(0.25, 0.75))
h <- (r[2] - r[1])/1.34
4 * 1.06 * min(sqrt(var(x)), h) * length(x)^(-1/5)
}
fit = kde2d(e_simul[,1], e_simul[,2], n=90,
h = c(bdwd(e_simul[,1]), bdwd(e_simul[,2])))
#lims = c(quantile(e_simul[,1], probs = c(0.1, 0.9)),
#         quantile(e_simul[,2], probs = c(0.1, 0.9))))
filled.contour(fit, color = rainbow)
bdwd = function(x) {
r <- quantile(x, c(0.25, 0.75))
h <- (r[2] - r[1])/1.34
4 * 1.06 * min(sqrt(var(x)), h) * length(x)^(-1/5) / 10
}
fit = kde2d(e_simul[,1], e_simul[,2], n=90,
h = c(bdwd(e_simul[,1]), bdwd(e_simul[,2])))
#lims = c(quantile(e_simul[,1], probs = c(0.1, 0.9)),
#         quantile(e_simul[,2], probs = c(0.1, 0.9))))
filled.contour(fit, color = rainbow)
filled.contour(fit, color = rainbow,xlim=c(4.8, 5.1),ylim=c(4.2,9))
bdwd = function(x) {
r <- quantile(x, c(0.25, 0.75))
h <- (r[2] - r[1])/1.34
4 * 1.06 * min(sqrt(var(x)), h) * length(x)^(-1/5) / 4
}
fit = kde2d(e_simul[,1], e_simul[,2], n=90,
h = c(bdwd(e_simul[,1]), bdwd(e_simul[,2])))
#lims = c(quantile(e_simul[,1], probs = c(0.1, 0.9)),
#         quantile(e_simul[,2], probs = c(0.1, 0.9))))
filled.contour(fit, color = rainbow)
filled.contour(fit, color = rainbow,xlim=c(4.8, 5.1),ylim=c(4.2,9))
bdwd = function(x) {
r <- quantile(x, c(0.25, 0.75))
h <- (r[2] - r[1])/1.34
4 * 1.06 * min(sqrt(var(x)), h) * length(x)^(-1/5) / 1.5
}
fit = kde2d(e_simul[,1], e_simul[,2], n=90,
h = c(bdwd(e_simul[,1]), bdwd(e_simul[,2])))
#lims = c(quantile(e_simul[,1], probs = c(0.1, 0.9)),
#         quantile(e_simul[,2], probs = c(0.1, 0.9))))
filled.contour(fit, color = rainbow)
filled.contour(fit, color = rainbow,xlim=c(4.8, 5.1),ylim=c(4.2,9))
fit = kde2d(e_simul[,1], e_simul[,2], n=300,
h = c(bdwd(e_simul[,1]), bdwd(e_simul[,2])))
#lims = c(quantile(e_simul[,1], probs = c(0.1, 0.9)),
#         quantile(e_simul[,2], probs = c(0.1, 0.9))))
filled.contour(fit, color = rainbow)
filled.contour(fit, color = rainbow,xlim=c(4.8, 5.1),ylim=c(4.2,9))
i=1
Sigma = matrix(c(sig1[i],cov1[i],cov1[i],sig2[i]),2,2) #/ 10
e_simul = mvrnorm(n=round(n[i]*0.1)+10, c(mu1[i],mu2[i]),  Sigma)
for (i in 2:nrow(temp)) {
Sigma = matrix(c(sig1[i], cov1[i], cov1[i], sig2[i]),2,2) #/ 10
e_simul = rbind(e_simul, mvrnorm(n=round(n[i]*0.1)+10, c(mu1[i],mu2[i]),  Sigma))
}
bdwd = function(x) {
r <- quantile(x, c(0.25, 0.75))
h <- (r[2] - r[1])/1.34
4 * 1.06 * min(sqrt(var(x)), h) * length(x)^(-1/5) / 1.5
}
fit = kde2d(e_simul[,1], e_simul[,2], n=300,
h = c(bdwd(e_simul[,1]), bdwd(e_simul[,2])))
#lims = c(quantile(e_simul[,1], probs = c(0.1, 0.9)),
#         quantile(e_simul[,2], probs = c(0.1, 0.9))))
filled.contour(fit, color = rainbow)
filled.contour(fit, color = rainbow,xlim=c(4.8, 5.1),ylim=c(4.2,9))
#lims = c(quantile(e_simul[,1], probs = c(0.1, 0.9)),
#         quantile(e_simul[,2], probs = c(0.1, 0.9))))
filled.contour(fit, color = rainbow)
bdwd = function(x) {
r <- quantile(x, c(0.25, 0.75))
h <- (r[2] - r[1])/1.34
4 * 1.06 * min(sqrt(var(x)), h) * length(x)^(-1/5) / 1.25
}
fit = kde2d(e_simul[,1], e_simul[,2], n=300,
h = c(bdwd(e_simul[,1]), bdwd(e_simul[,2])))
#lims = c(quantile(e_simul[,1], probs = c(0.1, 0.9)),
#         quantile(e_simul[,2], probs = c(0.1, 0.9))))
filled.contour(fit, color = rainbow)
filled.contour(fit, color = rainbow,xlim=c(4.8, 5.1),ylim=c(4.2,9))
filled.contour(fit, color = rainbow,xlim=c(4.8, 5.1),ylim=c(4.2,9))
i=1
Sigma = matrix(c(sig1[i],cov1[i],cov1[i],sig2[i]),2,2) / 10
e_simul = mvrnorm(n=round(n[i]), c(mu1[i],mu2[i]),  Sigma)
for (i in 2:nrow(temp)) {
Sigma = matrix(c(sig1[i], cov1[i], cov1[i], sig2[i]),2,2) / 10
e_simul = rbind(e_simul, mvrnorm(n=round(n[i]), c(mu1[i],mu2[i]),  Sigma))
}
bdwd = function(x) {
r <- quantile(x, c(0.25, 0.75))
h <- (r[2] - r[1])/1.34
4 * 1.06 * min(sqrt(var(x)), h) * length(x)^(-1/5) / 1.25
}
plot(e_simul)
fit = kde2d(e_simul[,1], e_simul[,2], n=300,
h = c(bdwd(e_simul[,1]), bdwd(e_simul[,2])))
#lims = c(quantile(e_simul[,1], probs = c(0.1, 0.9)),
#         quantile(e_simul[,2], probs = c(0.1, 0.9))))
filled.contour(fit, color = rainbow)
filled.contour(fit, color = rainbow,xlim=c(4.8, 5.1),ylim=c(4.2,9))
bdwd = function(x) {
r <- quantile(x, c(0.25, 0.75))
h <- (r[2] - r[1])/1.34
4 * 1.06 * min(sqrt(var(x)), h) * length(x)^(-1/5) / 1.5
}
i=1
Sigma = matrix(c(sig1[i],cov1[i],cov1[i],sig2[i]),2,2) / 50
e_simul = mvrnorm(n=round(n[i]), c(mu1[i],mu2[i]),  Sigma)
for (i in 2:nrow(temp)) {
Sigma = matrix(c(sig1[i], cov1[i], cov1[i], sig2[i]),2,2) / 50
e_simul = rbind(e_simul, mvrnorm(n=round(n[i]), c(mu1[i],mu2[i]),  Sigma))
}
plot(e_simul)
bdwd = function(x) {
r <- quantile(x, c(0.25, 0.75))
h <- (r[2] - r[1])/1.34
4 * 1.06 * min(sqrt(var(x)), h) * length(x)^(-1/5) / 1.5
}
fit = kde2d(e_simul[,1], e_simul[,2], n=300,
h = c(bdwd(e_simul[,1]), bdwd(e_simul[,2])))
#lims = c(quantile(e_simul[,1], probs = c(0.1, 0.9)),
#         quantile(e_simul[,2], probs = c(0.1, 0.9))))
filled.contour(fit, color = rainbow)
bdwd = function(x) {
r <- quantile(x, c(0.25, 0.75))
h <- (r[2] - r[1])/1.34
4 * 1.06 * min(sqrt(var(x)), h) * length(x)^(-1/5) #/ 1.1
}
fit = kde2d(e_simul[,1], e_simul[,2], n=300,
h = c(bdwd(e_simul[,1]), bdwd(e_simul[,2])))
#lims = c(quantile(e_simul[,1], probs = c(0.1, 0.9)),
#         quantile(e_simul[,2], probs = c(0.1, 0.9))))
filled.contour(fit, color = rainbow)
filled.contour(fit, color = rainbow,xlim=c(4.8, 5.1),ylim=c(4.2,9))
i=1
Sigma = matrix(c(sig1[i],cov1[i],cov1[i],sig2[i]),2,2) / 20
e_simul = mvrnorm(n=round(n[i]), c(mu1[i],mu2[i]),  Sigma)
for (i in 2:nrow(temp)) {
Sigma = matrix(c(sig1[i], cov1[i], cov1[i], sig2[i]),2,2) / 20
e_simul = rbind(e_simul, mvrnorm(n=round(n[i]), c(mu1[i],mu2[i]),  Sigma))
}
plot(e_simul)
bdwd = function(x) {
r <- quantile(x, c(0.25, 0.75))
h <- (r[2] - r[1])/1.34
4 * 1.06 * min(sqrt(var(x)), h) * length(x)^(-1/5) #/ 1.1
}
fit = kde2d(e_simul[,1], e_simul[,2], n=300,
h = c(bdwd(e_simul[,1]), bdwd(e_simul[,2])))
#lims = c(quantile(e_simul[,1], probs = c(0.1, 0.9)),
#         quantile(e_simul[,2], probs = c(0.1, 0.9))))
filled.contour(fit, color = rainbow)
i=1
Sigma = matrix(c(sig1[i],cov1[i],cov1[i],sig2[i]),2,2) / 30
e_simul = mvrnorm(n=round(n[i]), c(mu1[i],mu2[i]),  Sigma)
for (i in 2:nrow(temp)) {
Sigma = matrix(c(sig1[i], cov1[i], cov1[i], sig2[i]),2,2) / 30
e_simul = rbind(e_simul, mvrnorm(n=round(n[i]), c(mu1[i],mu2[i]),  Sigma))
}
bdwd = function(x) {
r <- quantile(x, c(0.25, 0.75))
h <- (r[2] - r[1])/1.34
4 * 1.06 * min(sqrt(var(x)), h) * length(x)^(-1/5) #/ 1.1
}
fit = kde2d(e_simul[,1], e_simul[,2], n=300,
h = c(bdwd(e_simul[,1]), bdwd(e_simul[,2])))
#lims = c(quantile(e_simul[,1], probs = c(0.1, 0.9)),
#         quantile(e_simul[,2], probs = c(0.1, 0.9))))
filled.contour(fit, color = rainbow)
filled.contour(fit, color = rainbow,xlim=c(4.8, 5.1),ylim=c(4.2,9))
help("expand.grid")
filled.contour(fit, color = rainbow,xlim=c(4.85, 5.05),ylim=c(4.2,9))
filled.contour(fit, color = rainbow,xlim=c(4.85, 5.1),ylim=c(4.2,9))
